openapi: 3.0.0
info:
  title: AWS CodeCommit API
  version: '2015-04-13'
paths:
  /AssociateApprovalRuleTemplateWithRepository:
    post:
      summary: AssociateApprovalRuleTemplateWithRepository operation
      operationId: AssociateApprovalRuleTemplateWithRepository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleTemplateName:
                  type: string
                repositoryName:
                  type: string
              required:
              - approvalRuleTemplateName
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRuleTemplateDoesNotExistException:
    post:
      summary: ApprovalRuleTemplateDoesNotExistException operation
      operationId: ApprovalRuleTemplateDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRuleTemplateNameRequiredException:
    post:
      summary: ApprovalRuleTemplateNameRequiredException operation
      operationId: ApprovalRuleTemplateNameRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /EncryptionIntegrityChecksFailedException:
    post:
      summary: EncryptionIntegrityChecksFailedException operation
      operationId: EncryptionIntegrityChecksFailedException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /EncryptionKeyAccessDeniedException:
    post:
      summary: EncryptionKeyAccessDeniedException operation
      operationId: EncryptionKeyAccessDeniedException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /EncryptionKeyDisabledException:
    post:
      summary: EncryptionKeyDisabledException operation
      operationId: EncryptionKeyDisabledException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /EncryptionKeyNotFoundException:
    post:
      summary: EncryptionKeyNotFoundException operation
      operationId: EncryptionKeyNotFoundException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /EncryptionKeyUnavailableException:
    post:
      summary: EncryptionKeyUnavailableException operation
      operationId: EncryptionKeyUnavailableException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidApprovalRuleTemplateNameException:
    post:
      summary: InvalidApprovalRuleTemplateNameException operation
      operationId: InvalidApprovalRuleTemplateNameException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidRepositoryNameException:
    post:
      summary: InvalidRepositoryNameException operation
      operationId: InvalidRepositoryNameException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MaximumRuleTemplatesAssociatedWithRepositoryException:
    post:
      summary: MaximumRuleTemplatesAssociatedWithRepositoryException operation
      operationId: MaximumRuleTemplatesAssociatedWithRepositoryException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryDoesNotExistException:
    post:
      summary: RepositoryDoesNotExistException operation
      operationId: RepositoryDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryNameRequiredException:
    post:
      summary: RepositoryNameRequiredException operation
      operationId: RepositoryNameRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BatchAssociateApprovalRuleTemplateWithRepositories:
    post:
      summary: BatchAssociateApprovalRuleTemplateWithRepositories operation
      operationId: BatchAssociateApprovalRuleTemplateWithRepositories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleTemplateName:
                  type: string
                errorCode:
                  type: string
                errorMessage:
                  type: string
                repositoryName:
                  type: string
              required:
              - approvalRuleTemplateName
              - errorCode
              - errorMessage
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MaximumRepositoryNamesExceededException:
    post:
      summary: MaximumRepositoryNamesExceededException operation
      operationId: MaximumRepositoryNamesExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryNamesRequiredException:
    post:
      summary: RepositoryNamesRequiredException operation
      operationId: RepositoryNamesRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BatchDescribeMergeConflicts:
    post:
      summary: BatchDescribeMergeConflicts operation
      operationId: BatchDescribeMergeConflicts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conflictDetailLevel:
                  type: string
                conflictResolutionStrategy:
                  type: string
                destinationCommitSpecifier:
                  type: string
                mergeOption:
                  type: string
                nextToken:
                  type: string
                repositoryName:
                  type: string
                sourceCommitSpecifier:
                  type: string
                baseCommitId:
                  type: string
                base:
                  type: string
                destination:
                  type: string
                source:
                  type: string
                filePath:
                  type: string
                hunkContent:
                  type: string
                destinationCommitId:
                  type: string
                exceptionName:
                  type: string
                message:
                  type: string
                sourceCommitId:
                  type: string
              required:
              - conflictDetailLevel
              - conflictResolutionStrategy
              - destinationCommitSpecifier
              - mergeOption
              - nextToken
              - repositoryName
              - sourceCommitSpecifier
              - baseCommitId
              - base
              - destination
              - source
              - filePath
              - destination
              - source
              - base
              - destination
              - source
              - hunkContent
              - hunkContent
              - hunkContent
              - destinationCommitId
              - exceptionName
              - filePath
              - message
              - nextToken
              - sourceCommitId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommitDoesNotExistException:
    post:
      summary: CommitDoesNotExistException operation
      operationId: CommitDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommitRequiredException:
    post:
      summary: CommitRequiredException operation
      operationId: CommitRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidCommitException:
    post:
      summary: InvalidCommitException operation
      operationId: InvalidCommitException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidConflictDetailLevelException:
    post:
      summary: InvalidConflictDetailLevelException operation
      operationId: InvalidConflictDetailLevelException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidConflictResolutionStrategyException:
    post:
      summary: InvalidConflictResolutionStrategyException operation
      operationId: InvalidConflictResolutionStrategyException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidContinuationTokenException:
    post:
      summary: InvalidContinuationTokenException operation
      operationId: InvalidContinuationTokenException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidMaxConflictFilesException:
    post:
      summary: InvalidMaxConflictFilesException operation
      operationId: InvalidMaxConflictFilesException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidMaxMergeHunksException:
    post:
      summary: InvalidMaxMergeHunksException operation
      operationId: InvalidMaxMergeHunksException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidMergeOptionException:
    post:
      summary: InvalidMergeOptionException operation
      operationId: InvalidMergeOptionException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MaximumFileContentToLoadExceededException:
    post:
      summary: MaximumFileContentToLoadExceededException operation
      operationId: MaximumFileContentToLoadExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MaximumItemsToCompareExceededException:
    post:
      summary: MaximumItemsToCompareExceededException operation
      operationId: MaximumItemsToCompareExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MergeOptionRequiredException:
    post:
      summary: MergeOptionRequiredException operation
      operationId: MergeOptionRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /TipsDivergenceExceededException:
    post:
      summary: TipsDivergenceExceededException operation
      operationId: TipsDivergenceExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BatchDisassociateApprovalRuleTemplateFromRepositories:
    post:
      summary: BatchDisassociateApprovalRuleTemplateFromRepositories operation
      operationId: BatchDisassociateApprovalRuleTemplateFromRepositories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleTemplateName:
                  type: string
                errorCode:
                  type: string
                errorMessage:
                  type: string
                repositoryName:
                  type: string
              required:
              - approvalRuleTemplateName
              - errorCode
              - errorMessage
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BatchGetCommits:
    post:
      summary: BatchGetCommits operation
      operationId: BatchGetCommits
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                repositoryName:
                  type: string
                additionalData:
                  type: string
                date:
                  type: string
                email:
                  type: string
                name:
                  type: string
                commitId:
                  type: string
                message:
                  type: string
                treeId:
                  type: string
                errorCode:
                  type: string
                errorMessage:
                  type: string
              required:
              - repositoryName
              - additionalData
              - date
              - email
              - name
              - commitId
              - date
              - email
              - name
              - message
              - treeId
              - commitId
              - errorCode
              - errorMessage
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommitIdsLimitExceededException:
    post:
      summary: CommitIdsLimitExceededException operation
      operationId: CommitIdsLimitExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommitIdsListRequiredException:
    post:
      summary: CommitIdsListRequiredException operation
      operationId: CommitIdsListRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BatchGetRepositories:
    post:
      summary: BatchGetRepositories operation
      operationId: BatchGetRepositories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                errorCode:
                  type: string
                errorMessage:
                  type: string
                repositoryId:
                  type: string
                repositoryName:
                  type: string
                accountId:
                  type: string
                Arn:
                  type: string
                cloneUrlHttp:
                  type: string
                cloneUrlSsh:
                  type: string
                defaultBranch:
                  type: string
                kmsKeyId:
                  type: string
                repositoryDescription:
                  type: string
              required:
              - errorCode
              - errorMessage
              - repositoryId
              - repositoryName
              - accountId
              - Arn
              - cloneUrlHttp
              - cloneUrlSsh
              - defaultBranch
              - kmsKeyId
              - repositoryDescription
              - repositoryId
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CreateApprovalRuleTemplate:
    post:
      summary: CreateApprovalRuleTemplate operation
      operationId: CreateApprovalRuleTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleTemplateContent:
                  type: string
                approvalRuleTemplateDescription:
                  type: string
                approvalRuleTemplateName:
                  type: string
                approvalRuleTemplateId:
                  type: string
                lastModifiedUser:
                  type: string
                ruleContentSha256:
                  type: string
              required:
              - approvalRuleTemplateContent
              - approvalRuleTemplateDescription
              - approvalRuleTemplateName
              - approvalRuleTemplateContent
              - approvalRuleTemplateDescription
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - lastModifiedUser
              - ruleContentSha256
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRuleTemplateContentRequiredException:
    post:
      summary: ApprovalRuleTemplateContentRequiredException operation
      operationId: ApprovalRuleTemplateContentRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRuleTemplateNameAlreadyExistsException:
    post:
      summary: ApprovalRuleTemplateNameAlreadyExistsException operation
      operationId: ApprovalRuleTemplateNameAlreadyExistsException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidApprovalRuleTemplateContentException:
    post:
      summary: InvalidApprovalRuleTemplateContentException operation
      operationId: InvalidApprovalRuleTemplateContentException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidApprovalRuleTemplateDescriptionException:
    post:
      summary: InvalidApprovalRuleTemplateDescriptionException operation
      operationId: InvalidApprovalRuleTemplateDescriptionException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /NumberOfRuleTemplatesExceededException:
    post:
      summary: NumberOfRuleTemplatesExceededException operation
      operationId: NumberOfRuleTemplatesExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CreateBranch:
    post:
      summary: CreateBranch operation
      operationId: CreateBranch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branchName:
                  type: string
                commitId:
                  type: string
                repositoryName:
                  type: string
              required:
              - branchName
              - commitId
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BranchNameExistsException:
    post:
      summary: BranchNameExistsException operation
      operationId: BranchNameExistsException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BranchNameRequiredException:
    post:
      summary: BranchNameRequiredException operation
      operationId: BranchNameRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommitIdRequiredException:
    post:
      summary: CommitIdRequiredException operation
      operationId: CommitIdRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidBranchNameException:
    post:
      summary: InvalidBranchNameException operation
      operationId: InvalidBranchNameException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidCommitIdException:
    post:
      summary: InvalidCommitIdException operation
      operationId: InvalidCommitIdException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CreateCommit:
    post:
      summary: CreateCommit operation
      operationId: CreateCommit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authorName:
                  type: string
                branchName:
                  type: string
                commitMessage:
                  type: string
                filePath:
                  type: string
                email:
                  type: string
                parentCommitId:
                  type: string
                fileMode:
                  type: string
                repositoryName:
                  type: string
                commitId:
                  type: string
                absolutePath:
                  type: string
                blobId:
                  type: string
                treeId:
                  type: string
              required:
              - authorName
              - branchName
              - commitMessage
              - filePath
              - email
              - parentCommitId
              - fileMode
              - filePath
              - filePath
              - repositoryName
              - fileMode
              - filePath
              - commitId
              - absolutePath
              - blobId
              - fileMode
              - absolutePath
              - blobId
              - fileMode
              - absolutePath
              - blobId
              - fileMode
              - treeId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BranchDoesNotExistException:
    post:
      summary: BranchDoesNotExistException operation
      operationId: BranchDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BranchNameIsTagNameException:
    post:
      summary: BranchNameIsTagNameException operation
      operationId: BranchNameIsTagNameException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommitMessageLengthExceededException:
    post:
      summary: CommitMessageLengthExceededException operation
      operationId: CommitMessageLengthExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /DirectoryNameConflictsWithFileNameException:
    post:
      summary: DirectoryNameConflictsWithFileNameException operation
      operationId: DirectoryNameConflictsWithFileNameException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FileContentAndSourceFileSpecifiedException:
    post:
      summary: FileContentAndSourceFileSpecifiedException operation
      operationId: FileContentAndSourceFileSpecifiedException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FileContentSizeLimitExceededException:
    post:
      summary: FileContentSizeLimitExceededException operation
      operationId: FileContentSizeLimitExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FileDoesNotExistException:
    post:
      summary: FileDoesNotExistException operation
      operationId: FileDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FileEntryRequiredException:
    post:
      summary: FileEntryRequiredException operation
      operationId: FileEntryRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FileModeRequiredException:
    post:
      summary: FileModeRequiredException operation
      operationId: FileModeRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FileNameConflictsWithDirectoryNameException:
    post:
      summary: FileNameConflictsWithDirectoryNameException operation
      operationId: FileNameConflictsWithDirectoryNameException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FilePathConflictsWithSubmodulePathException:
    post:
      summary: FilePathConflictsWithSubmodulePathException operation
      operationId: FilePathConflictsWithSubmodulePathException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FolderContentSizeLimitExceededException:
    post:
      summary: FolderContentSizeLimitExceededException operation
      operationId: FolderContentSizeLimitExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidDeletionParameterException:
    post:
      summary: InvalidDeletionParameterException operation
      operationId: InvalidDeletionParameterException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidEmailException:
    post:
      summary: InvalidEmailException operation
      operationId: InvalidEmailException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidFileModeException:
    post:
      summary: InvalidFileModeException operation
      operationId: InvalidFileModeException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidParentCommitIdException:
    post:
      summary: InvalidParentCommitIdException operation
      operationId: InvalidParentCommitIdException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidPathException:
    post:
      summary: InvalidPathException operation
      operationId: InvalidPathException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MaximumFileEntriesExceededException:
    post:
      summary: MaximumFileEntriesExceededException operation
      operationId: MaximumFileEntriesExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /NameLengthExceededException:
    post:
      summary: NameLengthExceededException operation
      operationId: NameLengthExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /NoChangeException:
    post:
      summary: NoChangeException operation
      operationId: NoChangeException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ParentCommitDoesNotExistException:
    post:
      summary: ParentCommitDoesNotExistException operation
      operationId: ParentCommitDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ParentCommitIdOutdatedException:
    post:
      summary: ParentCommitIdOutdatedException operation
      operationId: ParentCommitIdOutdatedException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ParentCommitIdRequiredException:
    post:
      summary: ParentCommitIdRequiredException operation
      operationId: ParentCommitIdRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PathRequiredException:
    post:
      summary: PathRequiredException operation
      operationId: PathRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PutFileEntryConflictException:
    post:
      summary: PutFileEntryConflictException operation
      operationId: PutFileEntryConflictException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RestrictedSourceFileException:
    post:
      summary: RestrictedSourceFileException operation
      operationId: RestrictedSourceFileException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /SamePathRequestException:
    post:
      summary: SamePathRequestException operation
      operationId: SamePathRequestException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /SourceFileOrContentRequiredException:
    post:
      summary: SourceFileOrContentRequiredException operation
      operationId: SourceFileOrContentRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CreatePullRequest:
    post:
      summary: CreatePullRequest operation
      operationId: CreatePullRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientRequestToken:
                  type: string
                description:
                  type: string
                destinationReference:
                  type: string
                repositoryName:
                  type: string
                sourceReference:
                  type: string
                title:
                  type: string
                approvalRuleContent:
                  type: string
                approvalRuleId:
                  type: string
                approvalRuleName:
                  type: string
                lastModifiedUser:
                  type: string
                approvalRuleTemplateId:
                  type: string
                approvalRuleTemplateName:
                  type: string
                ruleContentSha256:
                  type: string
                authorArn:
                  type: string
                pullRequestId:
                  type: string
                pullRequestStatus:
                  type: string
                destinationCommit:
                  type: string
                mergeBase:
                  type: string
                mergeCommitId:
                  type: string
                mergedBy:
                  type: string
                mergeOption:
                  type: string
                sourceCommit:
                  type: string
                revisionId:
                  type: string
              required:
              - clientRequestToken
              - description
              - destinationReference
              - repositoryName
              - sourceReference
              - title
              - approvalRuleContent
              - approvalRuleId
              - approvalRuleName
              - lastModifiedUser
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - ruleContentSha256
              - authorArn
              - clientRequestToken
              - description
              - pullRequestId
              - pullRequestStatus
              - destinationCommit
              - destinationReference
              - mergeBase
              - mergeCommitId
              - mergedBy
              - mergeOption
              - repositoryName
              - sourceCommit
              - sourceReference
              - revisionId
              - title
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ClientRequestTokenRequiredException:
    post:
      summary: ClientRequestTokenRequiredException operation
      operationId: ClientRequestTokenRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /IdempotencyParameterMismatchException:
    post:
      summary: IdempotencyParameterMismatchException operation
      operationId: IdempotencyParameterMismatchException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidClientRequestTokenException:
    post:
      summary: InvalidClientRequestTokenException operation
      operationId: InvalidClientRequestTokenException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidDescriptionException:
    post:
      summary: InvalidDescriptionException operation
      operationId: InvalidDescriptionException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidReferenceNameException:
    post:
      summary: InvalidReferenceNameException operation
      operationId: InvalidReferenceNameException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidTargetException:
    post:
      summary: InvalidTargetException operation
      operationId: InvalidTargetException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidTargetsException:
    post:
      summary: InvalidTargetsException operation
      operationId: InvalidTargetsException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidTitleException:
    post:
      summary: InvalidTitleException operation
      operationId: InvalidTitleException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MaximumOpenPullRequestsExceededException:
    post:
      summary: MaximumOpenPullRequestsExceededException operation
      operationId: MaximumOpenPullRequestsExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MultipleRepositoriesInPullRequestException:
    post:
      summary: MultipleRepositoriesInPullRequestException operation
      operationId: MultipleRepositoriesInPullRequestException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ReferenceDoesNotExistException:
    post:
      summary: ReferenceDoesNotExistException operation
      operationId: ReferenceDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ReferenceNameRequiredException:
    post:
      summary: ReferenceNameRequiredException operation
      operationId: ReferenceNameRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ReferenceTypeNotSupportedException:
    post:
      summary: ReferenceTypeNotSupportedException operation
      operationId: ReferenceTypeNotSupportedException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /SourceAndDestinationAreSameException:
    post:
      summary: SourceAndDestinationAreSameException operation
      operationId: SourceAndDestinationAreSameException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /TargetRequiredException:
    post:
      summary: TargetRequiredException operation
      operationId: TargetRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /TargetsRequiredException:
    post:
      summary: TargetsRequiredException operation
      operationId: TargetsRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /TitleRequiredException:
    post:
      summary: TitleRequiredException operation
      operationId: TitleRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CreatePullRequestApprovalRule:
    post:
      summary: CreatePullRequestApprovalRule operation
      operationId: CreatePullRequestApprovalRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleContent:
                  type: string
                approvalRuleName:
                  type: string
                pullRequestId:
                  type: string
                approvalRuleId:
                  type: string
                lastModifiedUser:
                  type: string
                approvalRuleTemplateId:
                  type: string
                approvalRuleTemplateName:
                  type: string
                ruleContentSha256:
                  type: string
              required:
              - approvalRuleContent
              - approvalRuleName
              - pullRequestId
              - approvalRuleContent
              - approvalRuleId
              - approvalRuleName
              - lastModifiedUser
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - ruleContentSha256
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRuleContentRequiredException:
    post:
      summary: ApprovalRuleContentRequiredException operation
      operationId: ApprovalRuleContentRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRuleNameAlreadyExistsException:
    post:
      summary: ApprovalRuleNameAlreadyExistsException operation
      operationId: ApprovalRuleNameAlreadyExistsException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRuleNameRequiredException:
    post:
      summary: ApprovalRuleNameRequiredException operation
      operationId: ApprovalRuleNameRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidApprovalRuleContentException:
    post:
      summary: InvalidApprovalRuleContentException operation
      operationId: InvalidApprovalRuleContentException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidApprovalRuleNameException:
    post:
      summary: InvalidApprovalRuleNameException operation
      operationId: InvalidApprovalRuleNameException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidPullRequestIdException:
    post:
      summary: InvalidPullRequestIdException operation
      operationId: InvalidPullRequestIdException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /NumberOfRulesExceededException:
    post:
      summary: NumberOfRulesExceededException operation
      operationId: NumberOfRulesExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequestAlreadyClosedException:
    post:
      summary: PullRequestAlreadyClosedException operation
      operationId: PullRequestAlreadyClosedException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequestDoesNotExistException:
    post:
      summary: PullRequestDoesNotExistException operation
      operationId: PullRequestDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequestIdRequiredException:
    post:
      summary: PullRequestIdRequiredException operation
      operationId: PullRequestIdRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CreateRepository:
    post:
      summary: CreateRepository operation
      operationId: CreateRepository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                kmsKeyId:
                  type: string
                repositoryDescription:
                  type: string
                repositoryName:
                  type: string
                string:
                  type: string
                accountId:
                  type: string
                Arn:
                  type: string
                cloneUrlHttp:
                  type: string
                cloneUrlSsh:
                  type: string
                defaultBranch:
                  type: string
                repositoryId:
                  type: string
              required:
              - kmsKeyId
              - repositoryDescription
              - repositoryName
              - string
              - accountId
              - Arn
              - cloneUrlHttp
              - cloneUrlSsh
              - defaultBranch
              - kmsKeyId
              - repositoryDescription
              - repositoryId
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /EncryptionKeyInvalidIdException:
    post:
      summary: EncryptionKeyInvalidIdException operation
      operationId: EncryptionKeyInvalidIdException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /EncryptionKeyInvalidUsageException:
    post:
      summary: EncryptionKeyInvalidUsageException operation
      operationId: EncryptionKeyInvalidUsageException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidRepositoryDescriptionException:
    post:
      summary: InvalidRepositoryDescriptionException operation
      operationId: InvalidRepositoryDescriptionException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidSystemTagUsageException:
    post:
      summary: InvalidSystemTagUsageException operation
      operationId: InvalidSystemTagUsageException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidTagsMapException:
    post:
      summary: InvalidTagsMapException operation
      operationId: InvalidTagsMapException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /OperationNotAllowedException:
    post:
      summary: OperationNotAllowedException operation
      operationId: OperationNotAllowedException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryLimitExceededException:
    post:
      summary: RepositoryLimitExceededException operation
      operationId: RepositoryLimitExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryNameExistsException:
    post:
      summary: RepositoryNameExistsException operation
      operationId: RepositoryNameExistsException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /TagPolicyException:
    post:
      summary: TagPolicyException operation
      operationId: TagPolicyException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /TooManyTagsException:
    post:
      summary: TooManyTagsException operation
      operationId: TooManyTagsException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CreateUnreferencedMergeCommit:
    post:
      summary: CreateUnreferencedMergeCommit operation
      operationId: CreateUnreferencedMergeCommit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authorName:
                  type: string
                commitMessage:
                  type: string
                conflictDetailLevel:
                  type: string
                filePath:
                  type: string
                fileMode:
                  type: string
                replacementType:
                  type: string
                conflictResolutionStrategy:
                  type: string
                destinationCommitSpecifier:
                  type: string
                email:
                  type: string
                mergeOption:
                  type: string
                repositoryName:
                  type: string
                sourceCommitSpecifier:
                  type: string
                commitId:
                  type: string
                treeId:
                  type: string
              required:
              - authorName
              - commitMessage
              - conflictDetailLevel
              - filePath
              - fileMode
              - filePath
              - replacementType
              - fileMode
              - filePath
              - conflictResolutionStrategy
              - destinationCommitSpecifier
              - email
              - mergeOption
              - repositoryName
              - sourceCommitSpecifier
              - commitId
              - treeId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ConcurrentReferenceUpdateException:
    post:
      summary: ConcurrentReferenceUpdateException operation
      operationId: ConcurrentReferenceUpdateException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidConflictResolutionException:
    post:
      summary: InvalidConflictResolutionException operation
      operationId: InvalidConflictResolutionException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidReplacementContentException:
    post:
      summary: InvalidReplacementContentException operation
      operationId: InvalidReplacementContentException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidReplacementTypeException:
    post:
      summary: InvalidReplacementTypeException operation
      operationId: InvalidReplacementTypeException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ManualMergeRequiredException:
    post:
      summary: ManualMergeRequiredException operation
      operationId: ManualMergeRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MaximumConflictResolutionEntriesExceededException:
    post:
      summary: MaximumConflictResolutionEntriesExceededException operation
      operationId: MaximumConflictResolutionEntriesExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MultipleConflictResolutionEntriesException:
    post:
      summary: MultipleConflictResolutionEntriesException operation
      operationId: MultipleConflictResolutionEntriesException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ReplacementContentRequiredException:
    post:
      summary: ReplacementContentRequiredException operation
      operationId: ReplacementContentRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ReplacementTypeRequiredException:
    post:
      summary: ReplacementTypeRequiredException operation
      operationId: ReplacementTypeRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /DeleteApprovalRuleTemplate:
    post:
      summary: DeleteApprovalRuleTemplate operation
      operationId: DeleteApprovalRuleTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleTemplateName:
                  type: string
                approvalRuleTemplateId:
                  type: string
              required:
              - approvalRuleTemplateName
              - approvalRuleTemplateId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRuleTemplateInUseException:
    post:
      summary: ApprovalRuleTemplateInUseException operation
      operationId: ApprovalRuleTemplateInUseException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /DeleteBranch:
    post:
      summary: DeleteBranch operation
      operationId: DeleteBranch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branchName:
                  type: string
                repositoryName:
                  type: string
                commitId:
                  type: string
              required:
              - branchName
              - repositoryName
              - branchName
              - commitId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /DefaultBranchCannotBeDeletedException:
    post:
      summary: DefaultBranchCannotBeDeletedException operation
      operationId: DefaultBranchCannotBeDeletedException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /DeleteCommentContent:
    post:
      summary: DeleteCommentContent operation
      operationId: DeleteCommentContent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
                authorArn:
                  type: string
                clientRequestToken:
                  type: string
                content:
                  type: string
                inReplyTo:
                  type: string
              required:
              - commentId
              - authorArn
              - clientRequestToken
              - commentId
              - content
              - inReplyTo
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommentDeletedException:
    post:
      summary: CommentDeletedException operation
      operationId: CommentDeletedException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommentDoesNotExistException:
    post:
      summary: CommentDoesNotExistException operation
      operationId: CommentDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommentIdRequiredException:
    post:
      summary: CommentIdRequiredException operation
      operationId: CommentIdRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidCommentIdException:
    post:
      summary: InvalidCommentIdException operation
      operationId: InvalidCommentIdException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /DeleteFile:
    post:
      summary: DeleteFile operation
      operationId: DeleteFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branchName:
                  type: string
                commitMessage:
                  type: string
                email:
                  type: string
                filePath:
                  type: string
                name:
                  type: string
                parentCommitId:
                  type: string
                repositoryName:
                  type: string
                blobId:
                  type: string
                commitId:
                  type: string
                treeId:
                  type: string
              required:
              - branchName
              - commitMessage
              - email
              - filePath
              - name
              - parentCommitId
              - repositoryName
              - blobId
              - commitId
              - filePath
              - treeId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /DeletePullRequestApprovalRule:
    post:
      summary: DeletePullRequestApprovalRule operation
      operationId: DeletePullRequestApprovalRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleName:
                  type: string
                pullRequestId:
                  type: string
                approvalRuleId:
                  type: string
              required:
              - approvalRuleName
              - pullRequestId
              - approvalRuleId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CannotDeleteApprovalRuleFromTemplateException:
    post:
      summary: CannotDeleteApprovalRuleFromTemplateException operation
      operationId: CannotDeleteApprovalRuleFromTemplateException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /DeleteRepository:
    post:
      summary: DeleteRepository operation
      operationId: DeleteRepository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                repositoryName:
                  type: string
                repositoryId:
                  type: string
              required:
              - repositoryName
              - repositoryId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /DescribeMergeConflicts:
    post:
      summary: DescribeMergeConflicts operation
      operationId: DescribeMergeConflicts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conflictDetailLevel:
                  type: string
                conflictResolutionStrategy:
                  type: string
                destinationCommitSpecifier:
                  type: string
                filePath:
                  type: string
                mergeOption:
                  type: string
                nextToken:
                  type: string
                repositoryName:
                  type: string
                sourceCommitSpecifier:
                  type: string
                baseCommitId:
                  type: string
                base:
                  type: string
                destination:
                  type: string
                source:
                  type: string
                destinationCommitId:
                  type: string
                hunkContent:
                  type: string
                sourceCommitId:
                  type: string
              required:
              - conflictDetailLevel
              - conflictResolutionStrategy
              - destinationCommitSpecifier
              - filePath
              - mergeOption
              - nextToken
              - repositoryName
              - sourceCommitSpecifier
              - baseCommitId
              - base
              - destination
              - source
              - filePath
              - destination
              - source
              - base
              - destination
              - source
              - destinationCommitId
              - hunkContent
              - hunkContent
              - hunkContent
              - nextToken
              - sourceCommitId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /DescribePullRequestEvents:
    post:
      summary: DescribePullRequestEvents operation
      operationId: DescribePullRequestEvents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actorArn:
                  type: string
                nextToken:
                  type: string
                pullRequestEventType:
                  type: string
                pullRequestId:
                  type: string
                approvalRuleContent:
                  type: string
                approvalRuleId:
                  type: string
                approvalRuleName:
                  type: string
                overrideStatus:
                  type: string
                revisionId:
                  type: string
                approvalStatus:
                  type: string
                destinationCommitId:
                  type: string
                mergeBase:
                  type: string
                repositoryName:
                  type: string
                sourceCommitId:
                  type: string
                destinationReference:
                  type: string
                mergeCommitId:
                  type: string
                mergedBy:
                  type: string
                mergeOption:
                  type: string
                afterCommitId:
                  type: string
                beforeCommitId:
                  type: string
                pullRequestStatus:
                  type: string
              required:
              - actorArn
              - nextToken
              - pullRequestEventType
              - pullRequestId
              - nextToken
              - actorArn
              - approvalRuleContent
              - approvalRuleId
              - approvalRuleName
              - overrideStatus
              - revisionId
              - approvalStatus
              - revisionId
              - destinationCommitId
              - mergeBase
              - repositoryName
              - sourceCommitId
              - pullRequestEventType
              - pullRequestId
              - destinationReference
              - mergeCommitId
              - mergedBy
              - mergeOption
              - repositoryName
              - afterCommitId
              - beforeCommitId
              - mergeBase
              - repositoryName
              - pullRequestStatus
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ActorDoesNotExistException:
    post:
      summary: ActorDoesNotExistException operation
      operationId: ActorDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidActorArnException:
    post:
      summary: InvalidActorArnException operation
      operationId: InvalidActorArnException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidMaxResultsException:
    post:
      summary: InvalidMaxResultsException operation
      operationId: InvalidMaxResultsException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidPullRequestEventTypeException:
    post:
      summary: InvalidPullRequestEventTypeException operation
      operationId: InvalidPullRequestEventTypeException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /DisassociateApprovalRuleTemplateFromRepository:
    post:
      summary: DisassociateApprovalRuleTemplateFromRepository operation
      operationId: DisassociateApprovalRuleTemplateFromRepository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleTemplateName:
                  type: string
                repositoryName:
                  type: string
              required:
              - approvalRuleTemplateName
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /EvaluatePullRequestApprovalRules:
    post:
      summary: EvaluatePullRequestApprovalRules operation
      operationId: EvaluatePullRequestApprovalRules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pullRequestId:
                  type: string
                revisionId:
                  type: string
              required:
              - pullRequestId
              - revisionId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidRevisionIdException:
    post:
      summary: InvalidRevisionIdException operation
      operationId: InvalidRevisionIdException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RevisionIdRequiredException:
    post:
      summary: RevisionIdRequiredException operation
      operationId: RevisionIdRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RevisionNotCurrentException:
    post:
      summary: RevisionNotCurrentException operation
      operationId: RevisionNotCurrentException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetApprovalRuleTemplate:
    post:
      summary: GetApprovalRuleTemplate operation
      operationId: GetApprovalRuleTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleTemplateName:
                  type: string
                approvalRuleTemplateContent:
                  type: string
                approvalRuleTemplateDescription:
                  type: string
                approvalRuleTemplateId:
                  type: string
                lastModifiedUser:
                  type: string
                ruleContentSha256:
                  type: string
              required:
              - approvalRuleTemplateName
              - approvalRuleTemplateContent
              - approvalRuleTemplateDescription
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - lastModifiedUser
              - ruleContentSha256
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetBlob:
    post:
      summary: GetBlob operation
      operationId: GetBlob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                blobId:
                  type: string
                repositoryName:
                  type: string
              required:
              - blobId
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BlobIdDoesNotExistException:
    post:
      summary: BlobIdDoesNotExistException operation
      operationId: BlobIdDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BlobIdRequiredException:
    post:
      summary: BlobIdRequiredException operation
      operationId: BlobIdRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FileTooLargeException:
    post:
      summary: FileTooLargeException operation
      operationId: FileTooLargeException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidBlobIdException:
    post:
      summary: InvalidBlobIdException operation
      operationId: InvalidBlobIdException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetBranch:
    post:
      summary: GetBranch operation
      operationId: GetBranch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branchName:
                  type: string
                repositoryName:
                  type: string
                commitId:
                  type: string
              required:
              - branchName
              - repositoryName
              - branchName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetComment:
    post:
      summary: GetComment operation
      operationId: GetComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
                authorArn:
                  type: string
                clientRequestToken:
                  type: string
                content:
                  type: string
                inReplyTo:
                  type: string
              required:
              - commentId
              - authorArn
              - clientRequestToken
              - commentId
              - content
              - inReplyTo
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetCommentReactions:
    post:
      summary: GetCommentReactions operation
      operationId: GetCommentReactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
                nextToken:
                  type: string
                reactionUserArn:
                  type: string
                emoji:
                  type: string
                shortCode:
                  type: string
                unicode:
                  type: string
              required:
              - commentId
              - nextToken
              - reactionUserArn
              - nextToken
              - emoji
              - shortCode
              - unicode
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidReactionUserArnException:
    post:
      summary: InvalidReactionUserArnException operation
      operationId: InvalidReactionUserArnException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetCommentsForComparedCommit:
    post:
      summary: GetCommentsForComparedCommit operation
      operationId: GetCommentsForComparedCommit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                afterCommitId:
                  type: string
                beforeCommitId:
                  type: string
                nextToken:
                  type: string
                repositoryName:
                  type: string
                afterBlobId:
                  type: string
                beforeBlobId:
                  type: string
                authorArn:
                  type: string
                clientRequestToken:
                  type: string
                commentId:
                  type: string
                content:
                  type: string
                inReplyTo:
                  type: string
                filePath:
                  type: string
                relativeFileVersion:
                  type: string
              required:
              - afterCommitId
              - beforeCommitId
              - nextToken
              - repositoryName
              - afterBlobId
              - afterCommitId
              - beforeBlobId
              - beforeCommitId
              - authorArn
              - clientRequestToken
              - commentId
              - content
              - inReplyTo
              - filePath
              - relativeFileVersion
              - repositoryName
              - nextToken
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetCommentsForPullRequest:
    post:
      summary: GetCommentsForPullRequest operation
      operationId: GetCommentsForPullRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                afterCommitId:
                  type: string
                beforeCommitId:
                  type: string
                nextToken:
                  type: string
                pullRequestId:
                  type: string
                repositoryName:
                  type: string
                afterBlobId:
                  type: string
                beforeBlobId:
                  type: string
                authorArn:
                  type: string
                clientRequestToken:
                  type: string
                commentId:
                  type: string
                content:
                  type: string
                inReplyTo:
                  type: string
                filePath:
                  type: string
                relativeFileVersion:
                  type: string
              required:
              - afterCommitId
              - beforeCommitId
              - nextToken
              - pullRequestId
              - repositoryName
              - afterBlobId
              - afterCommitId
              - beforeBlobId
              - beforeCommitId
              - authorArn
              - clientRequestToken
              - commentId
              - content
              - inReplyTo
              - filePath
              - relativeFileVersion
              - pullRequestId
              - repositoryName
              - nextToken
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryNotAssociatedWithPullRequestException:
    post:
      summary: RepositoryNotAssociatedWithPullRequestException operation
      operationId: RepositoryNotAssociatedWithPullRequestException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetCommit:
    post:
      summary: GetCommit operation
      operationId: GetCommit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commitId:
                  type: string
                repositoryName:
                  type: string
                additionalData:
                  type: string
                date:
                  type: string
                email:
                  type: string
                name:
                  type: string
                message:
                  type: string
                treeId:
                  type: string
              required:
              - commitId
              - repositoryName
              - additionalData
              - date
              - email
              - name
              - commitId
              - date
              - email
              - name
              - message
              - treeId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommitIdDoesNotExistException:
    post:
      summary: CommitIdDoesNotExistException operation
      operationId: CommitIdDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetDifferences:
    post:
      summary: GetDifferences operation
      operationId: GetDifferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                afterCommitSpecifier:
                  type: string
                afterPath:
                  type: string
                beforeCommitSpecifier:
                  type: string
                beforePath:
                  type: string
                NextToken:
                  type: string
                repositoryName:
                  type: string
              required:
              - afterCommitSpecifier
              - afterPath
              - beforeCommitSpecifier
              - beforePath
              - NextToken
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MaxResults:
    post:
      summary: MaxResults operation
      operationId: MaxResults
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /NextToken:
    post:
      summary: NextToken operation
      operationId: NextToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PathDoesNotExistException:
    post:
      summary: PathDoesNotExistException operation
      operationId: PathDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetFile:
    post:
      summary: GetFile operation
      operationId: GetFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commitSpecifier:
                  type: string
                filePath:
                  type: string
                repositoryName:
                  type: string
                blobId:
                  type: string
                commitId:
                  type: string
                fileMode:
                  type: string
              required:
              - commitSpecifier
              - filePath
              - repositoryName
              - blobId
              - commitId
              - fileMode
              - filePath
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetFolder:
    post:
      summary: GetFolder operation
      operationId: GetFolder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commitSpecifier:
                  type: string
                folderPath:
                  type: string
                repositoryName:
                  type: string
                commitId:
                  type: string
                absolutePath:
                  type: string
                blobId:
                  type: string
                fileMode:
                  type: string
                relativePath:
                  type: string
                treeId:
                  type: string
              required:
              - commitSpecifier
              - folderPath
              - repositoryName
              - commitId
              - absolutePath
              - blobId
              - fileMode
              - relativePath
              - folderPath
              - absolutePath
              - relativePath
              - treeId
              - absolutePath
              - commitId
              - relativePath
              - absolutePath
              - blobId
              - fileMode
              - relativePath
              - treeId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FolderDoesNotExistException:
    post:
      summary: FolderDoesNotExistException operation
      operationId: FolderDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetMergeCommit:
    post:
      summary: GetMergeCommit operation
      operationId: GetMergeCommit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conflictDetailLevel:
                  type: string
                conflictResolutionStrategy:
                  type: string
                destinationCommitSpecifier:
                  type: string
                repositoryName:
                  type: string
                sourceCommitSpecifier:
                  type: string
                baseCommitId:
                  type: string
                destinationCommitId:
                  type: string
                mergedCommitId:
                  type: string
                sourceCommitId:
                  type: string
              required:
              - conflictDetailLevel
              - conflictResolutionStrategy
              - destinationCommitSpecifier
              - repositoryName
              - sourceCommitSpecifier
              - baseCommitId
              - destinationCommitId
              - mergedCommitId
              - sourceCommitId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetMergeConflicts:
    post:
      summary: GetMergeConflicts operation
      operationId: GetMergeConflicts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conflictDetailLevel:
                  type: string
                conflictResolutionStrategy:
                  type: string
                destinationCommitSpecifier:
                  type: string
                mergeOption:
                  type: string
                nextToken:
                  type: string
                repositoryName:
                  type: string
                sourceCommitSpecifier:
                  type: string
                baseCommitId:
                  type: string
                base:
                  type: string
                destination:
                  type: string
                source:
                  type: string
                filePath:
                  type: string
                destinationCommitId:
                  type: string
                sourceCommitId:
                  type: string
              required:
              - conflictDetailLevel
              - conflictResolutionStrategy
              - destinationCommitSpecifier
              - mergeOption
              - nextToken
              - repositoryName
              - sourceCommitSpecifier
              - baseCommitId
              - base
              - destination
              - source
              - filePath
              - destination
              - source
              - base
              - destination
              - source
              - destinationCommitId
              - nextToken
              - sourceCommitId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidDestinationCommitSpecifierException:
    post:
      summary: InvalidDestinationCommitSpecifierException operation
      operationId: InvalidDestinationCommitSpecifierException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidSourceCommitSpecifierException:
    post:
      summary: InvalidSourceCommitSpecifierException operation
      operationId: InvalidSourceCommitSpecifierException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetMergeOptions:
    post:
      summary: GetMergeOptions operation
      operationId: GetMergeOptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conflictDetailLevel:
                  type: string
                conflictResolutionStrategy:
                  type: string
                destinationCommitSpecifier:
                  type: string
                repositoryName:
                  type: string
                sourceCommitSpecifier:
                  type: string
                baseCommitId:
                  type: string
                destinationCommitId:
                  type: string
                sourceCommitId:
                  type: string
              required:
              - conflictDetailLevel
              - conflictResolutionStrategy
              - destinationCommitSpecifier
              - repositoryName
              - sourceCommitSpecifier
              - baseCommitId
              - destinationCommitId
              - sourceCommitId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetPullRequest:
    post:
      summary: GetPullRequest operation
      operationId: GetPullRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pullRequestId:
                  type: string
                approvalRuleContent:
                  type: string
                approvalRuleId:
                  type: string
                approvalRuleName:
                  type: string
                lastModifiedUser:
                  type: string
                approvalRuleTemplateId:
                  type: string
                approvalRuleTemplateName:
                  type: string
                ruleContentSha256:
                  type: string
                authorArn:
                  type: string
                clientRequestToken:
                  type: string
                description:
                  type: string
                pullRequestStatus:
                  type: string
                destinationCommit:
                  type: string
                destinationReference:
                  type: string
                mergeBase:
                  type: string
                mergeCommitId:
                  type: string
                mergedBy:
                  type: string
                mergeOption:
                  type: string
                repositoryName:
                  type: string
                sourceCommit:
                  type: string
                sourceReference:
                  type: string
                revisionId:
                  type: string
                title:
                  type: string
              required:
              - pullRequestId
              - approvalRuleContent
              - approvalRuleId
              - approvalRuleName
              - lastModifiedUser
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - ruleContentSha256
              - authorArn
              - clientRequestToken
              - description
              - pullRequestId
              - pullRequestStatus
              - destinationCommit
              - destinationReference
              - mergeBase
              - mergeCommitId
              - mergedBy
              - mergeOption
              - repositoryName
              - sourceCommit
              - sourceReference
              - revisionId
              - title
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetPullRequestApprovalStates:
    post:
      summary: GetPullRequestApprovalStates operation
      operationId: GetPullRequestApprovalStates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pullRequestId:
                  type: string
                revisionId:
                  type: string
                approvalState:
                  type: string
                userArn:
                  type: string
              required:
              - pullRequestId
              - revisionId
              - approvalState
              - userArn
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetPullRequestOverrideState:
    post:
      summary: GetPullRequestOverrideState operation
      operationId: GetPullRequestOverrideState
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pullRequestId:
                  type: string
                revisionId:
                  type: string
                overrider:
                  type: string
              required:
              - pullRequestId
              - revisionId
              - overrider
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetRepository:
    post:
      summary: GetRepository operation
      operationId: GetRepository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                repositoryName:
                  type: string
                accountId:
                  type: string
                Arn:
                  type: string
                cloneUrlHttp:
                  type: string
                cloneUrlSsh:
                  type: string
                defaultBranch:
                  type: string
                kmsKeyId:
                  type: string
                repositoryDescription:
                  type: string
                repositoryId:
                  type: string
              required:
              - repositoryName
              - accountId
              - Arn
              - cloneUrlHttp
              - cloneUrlSsh
              - defaultBranch
              - kmsKeyId
              - repositoryDescription
              - repositoryId
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /GetRepositoryTriggers:
    post:
      summary: GetRepositoryTriggers operation
      operationId: GetRepositoryTriggers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                repositoryName:
                  type: string
                configurationId:
                  type: string
                customData:
                  type: string
                destinationArn:
                  type: string
                name:
                  type: string
              required:
              - repositoryName
              - configurationId
              - customData
              - destinationArn
              - name
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ListApprovalRuleTemplates:
    post:
      summary: ListApprovalRuleTemplates operation
      operationId: ListApprovalRuleTemplates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  type: string
              required:
              - nextToken
              - nextToken
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ListAssociatedApprovalRuleTemplatesForRepository:
    post:
      summary: ListAssociatedApprovalRuleTemplatesForRepository operation
      operationId: ListAssociatedApprovalRuleTemplatesForRepository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  type: string
                repositoryName:
                  type: string
              required:
              - nextToken
              - repositoryName
              - nextToken
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ListBranches:
    post:
      summary: ListBranches operation
      operationId: ListBranches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  type: string
                repositoryName:
                  type: string
              required:
              - nextToken
              - repositoryName
              - nextToken
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ListFileCommitHistory:
    post:
      summary: ListFileCommitHistory operation
      operationId: ListFileCommitHistory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commitSpecifier:
                  type: string
                filePath:
                  type: string
                nextToken:
                  type: string
                repositoryName:
                  type: string
                blobId:
                  type: string
                additionalData:
                  type: string
                date:
                  type: string
                email:
                  type: string
                name:
                  type: string
                commitId:
                  type: string
                message:
                  type: string
                treeId:
                  type: string
                path:
                  type: string
              required:
              - commitSpecifier
              - filePath
              - nextToken
              - repositoryName
              - nextToken
              - blobId
              - additionalData
              - date
              - email
              - name
              - commitId
              - date
              - email
              - name
              - message
              - treeId
              - path
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ListPullRequests:
    post:
      summary: ListPullRequests operation
      operationId: ListPullRequests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authorArn:
                  type: string
                nextToken:
                  type: string
                pullRequestStatus:
                  type: string
                repositoryName:
                  type: string
              required:
              - authorArn
              - nextToken
              - pullRequestStatus
              - repositoryName
              - nextToken
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /AuthorDoesNotExistException:
    post:
      summary: AuthorDoesNotExistException operation
      operationId: AuthorDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidAuthorArnException:
    post:
      summary: InvalidAuthorArnException operation
      operationId: InvalidAuthorArnException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidPullRequestStatusException:
    post:
      summary: InvalidPullRequestStatusException operation
      operationId: InvalidPullRequestStatusException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ListRepositories:
    post:
      summary: ListRepositories operation
      operationId: ListRepositories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  type: string
                order:
                  type: string
                sortBy:
                  type: string
                repositoryId:
                  type: string
                repositoryName:
                  type: string
              required:
              - nextToken
              - order
              - sortBy
              - nextToken
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidOrderException:
    post:
      summary: InvalidOrderException operation
      operationId: InvalidOrderException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidSortByException:
    post:
      summary: InvalidSortByException operation
      operationId: InvalidSortByException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ListRepositoriesForApprovalRuleTemplate:
    post:
      summary: ListRepositoriesForApprovalRuleTemplate operation
      operationId: ListRepositoriesForApprovalRuleTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleTemplateName:
                  type: string
                nextToken:
                  type: string
              required:
              - approvalRuleTemplateName
              - nextToken
              - nextToken
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ListTagsForResource:
    post:
      summary: ListTagsForResource operation
      operationId: ListTagsForResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  type: string
                resourceArn:
                  type: string
                string:
                  type: string
              required:
              - nextToken
              - resourceArn
              - nextToken
              - string
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidResourceArnException:
    post:
      summary: InvalidResourceArnException operation
      operationId: InvalidResourceArnException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ResourceArnRequiredException:
    post:
      summary: ResourceArnRequiredException operation
      operationId: ResourceArnRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MergeBranchesByFastForward:
    post:
      summary: MergeBranchesByFastForward operation
      operationId: MergeBranchesByFastForward
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                destinationCommitSpecifier:
                  type: string
                repositoryName:
                  type: string
                sourceCommitSpecifier:
                  type: string
                targetBranch:
                  type: string
                commitId:
                  type: string
                treeId:
                  type: string
              required:
              - destinationCommitSpecifier
              - repositoryName
              - sourceCommitSpecifier
              - targetBranch
              - commitId
              - treeId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidTargetBranchException:
    post:
      summary: InvalidTargetBranchException operation
      operationId: InvalidTargetBranchException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MergeBranchesBySquash:
    post:
      summary: MergeBranchesBySquash operation
      operationId: MergeBranchesBySquash
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authorName:
                  type: string
                commitMessage:
                  type: string
                conflictDetailLevel:
                  type: string
                filePath:
                  type: string
                fileMode:
                  type: string
                replacementType:
                  type: string
                conflictResolutionStrategy:
                  type: string
                destinationCommitSpecifier:
                  type: string
                email:
                  type: string
                repositoryName:
                  type: string
                sourceCommitSpecifier:
                  type: string
                targetBranch:
                  type: string
                commitId:
                  type: string
                treeId:
                  type: string
              required:
              - authorName
              - commitMessage
              - conflictDetailLevel
              - filePath
              - fileMode
              - filePath
              - replacementType
              - fileMode
              - filePath
              - conflictResolutionStrategy
              - destinationCommitSpecifier
              - email
              - repositoryName
              - sourceCommitSpecifier
              - targetBranch
              - commitId
              - treeId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MergeBranchesByThreeWay:
    post:
      summary: MergeBranchesByThreeWay operation
      operationId: MergeBranchesByThreeWay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authorName:
                  type: string
                commitMessage:
                  type: string
                conflictDetailLevel:
                  type: string
                filePath:
                  type: string
                fileMode:
                  type: string
                replacementType:
                  type: string
                conflictResolutionStrategy:
                  type: string
                destinationCommitSpecifier:
                  type: string
                email:
                  type: string
                repositoryName:
                  type: string
                sourceCommitSpecifier:
                  type: string
                targetBranch:
                  type: string
                commitId:
                  type: string
                treeId:
                  type: string
              required:
              - authorName
              - commitMessage
              - conflictDetailLevel
              - filePath
              - fileMode
              - filePath
              - replacementType
              - fileMode
              - filePath
              - conflictResolutionStrategy
              - destinationCommitSpecifier
              - email
              - repositoryName
              - sourceCommitSpecifier
              - targetBranch
              - commitId
              - treeId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MergePullRequestByFastForward:
    post:
      summary: MergePullRequestByFastForward operation
      operationId: MergePullRequestByFastForward
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pullRequestId:
                  type: string
                repositoryName:
                  type: string
                sourceCommitId:
                  type: string
                approvalRuleContent:
                  type: string
                approvalRuleId:
                  type: string
                approvalRuleName:
                  type: string
                lastModifiedUser:
                  type: string
                approvalRuleTemplateId:
                  type: string
                approvalRuleTemplateName:
                  type: string
                ruleContentSha256:
                  type: string
                authorArn:
                  type: string
                clientRequestToken:
                  type: string
                description:
                  type: string
                pullRequestStatus:
                  type: string
                destinationCommit:
                  type: string
                destinationReference:
                  type: string
                mergeBase:
                  type: string
                mergeCommitId:
                  type: string
                mergedBy:
                  type: string
                mergeOption:
                  type: string
                sourceCommit:
                  type: string
                sourceReference:
                  type: string
                revisionId:
                  type: string
                title:
                  type: string
              required:
              - pullRequestId
              - repositoryName
              - sourceCommitId
              - approvalRuleContent
              - approvalRuleId
              - approvalRuleName
              - lastModifiedUser
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - ruleContentSha256
              - authorArn
              - clientRequestToken
              - description
              - pullRequestId
              - pullRequestStatus
              - destinationCommit
              - destinationReference
              - mergeBase
              - mergeCommitId
              - mergedBy
              - mergeOption
              - repositoryName
              - sourceCommit
              - sourceReference
              - revisionId
              - title
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequestApprovalRulesNotSatisfiedException:
    post:
      summary: PullRequestApprovalRulesNotSatisfiedException operation
      operationId: PullRequestApprovalRulesNotSatisfiedException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /TipOfSourceReferenceIsDifferentException:
    post:
      summary: TipOfSourceReferenceIsDifferentException operation
      operationId: TipOfSourceReferenceIsDifferentException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MergePullRequestBySquash:
    post:
      summary: MergePullRequestBySquash operation
      operationId: MergePullRequestBySquash
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authorName:
                  type: string
                commitMessage:
                  type: string
                conflictDetailLevel:
                  type: string
                filePath:
                  type: string
                fileMode:
                  type: string
                replacementType:
                  type: string
                conflictResolutionStrategy:
                  type: string
                email:
                  type: string
                pullRequestId:
                  type: string
                repositoryName:
                  type: string
                sourceCommitId:
                  type: string
                approvalRuleContent:
                  type: string
                approvalRuleId:
                  type: string
                approvalRuleName:
                  type: string
                lastModifiedUser:
                  type: string
                approvalRuleTemplateId:
                  type: string
                approvalRuleTemplateName:
                  type: string
                ruleContentSha256:
                  type: string
                authorArn:
                  type: string
                clientRequestToken:
                  type: string
                description:
                  type: string
                pullRequestStatus:
                  type: string
                destinationCommit:
                  type: string
                destinationReference:
                  type: string
                mergeBase:
                  type: string
                mergeCommitId:
                  type: string
                mergedBy:
                  type: string
                mergeOption:
                  type: string
                sourceCommit:
                  type: string
                sourceReference:
                  type: string
                revisionId:
                  type: string
                title:
                  type: string
              required:
              - authorName
              - commitMessage
              - conflictDetailLevel
              - filePath
              - fileMode
              - filePath
              - replacementType
              - fileMode
              - filePath
              - conflictResolutionStrategy
              - email
              - pullRequestId
              - repositoryName
              - sourceCommitId
              - approvalRuleContent
              - approvalRuleId
              - approvalRuleName
              - lastModifiedUser
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - ruleContentSha256
              - authorArn
              - clientRequestToken
              - description
              - pullRequestId
              - pullRequestStatus
              - destinationCommit
              - destinationReference
              - mergeBase
              - mergeCommitId
              - mergedBy
              - mergeOption
              - repositoryName
              - sourceCommit
              - sourceReference
              - revisionId
              - title
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MergePullRequestByThreeWay:
    post:
      summary: MergePullRequestByThreeWay operation
      operationId: MergePullRequestByThreeWay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authorName:
                  type: string
                commitMessage:
                  type: string
                conflictDetailLevel:
                  type: string
                filePath:
                  type: string
                fileMode:
                  type: string
                replacementType:
                  type: string
                conflictResolutionStrategy:
                  type: string
                email:
                  type: string
                pullRequestId:
                  type: string
                repositoryName:
                  type: string
                sourceCommitId:
                  type: string
                approvalRuleContent:
                  type: string
                approvalRuleId:
                  type: string
                approvalRuleName:
                  type: string
                lastModifiedUser:
                  type: string
                approvalRuleTemplateId:
                  type: string
                approvalRuleTemplateName:
                  type: string
                ruleContentSha256:
                  type: string
                authorArn:
                  type: string
                clientRequestToken:
                  type: string
                description:
                  type: string
                pullRequestStatus:
                  type: string
                destinationCommit:
                  type: string
                destinationReference:
                  type: string
                mergeBase:
                  type: string
                mergeCommitId:
                  type: string
                mergedBy:
                  type: string
                mergeOption:
                  type: string
                sourceCommit:
                  type: string
                sourceReference:
                  type: string
                revisionId:
                  type: string
                title:
                  type: string
              required:
              - authorName
              - commitMessage
              - conflictDetailLevel
              - filePath
              - fileMode
              - filePath
              - replacementType
              - fileMode
              - filePath
              - conflictResolutionStrategy
              - email
              - pullRequestId
              - repositoryName
              - sourceCommitId
              - approvalRuleContent
              - approvalRuleId
              - approvalRuleName
              - lastModifiedUser
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - ruleContentSha256
              - authorArn
              - clientRequestToken
              - description
              - pullRequestId
              - pullRequestStatus
              - destinationCommit
              - destinationReference
              - mergeBase
              - mergeCommitId
              - mergedBy
              - mergeOption
              - repositoryName
              - sourceCommit
              - sourceReference
              - revisionId
              - title
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /OverridePullRequestApprovalRules:
    post:
      summary: OverridePullRequestApprovalRules operation
      operationId: OverridePullRequestApprovalRules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                overrideStatus:
                  type: string
                pullRequestId:
                  type: string
                revisionId:
                  type: string
              required:
              - overrideStatus
              - pullRequestId
              - revisionId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidOverrideStatusException:
    post:
      summary: InvalidOverrideStatusException operation
      operationId: InvalidOverrideStatusException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /OverrideAlreadySetException:
    post:
      summary: OverrideAlreadySetException operation
      operationId: OverrideAlreadySetException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /OverrideStatusRequiredException:
    post:
      summary: OverrideStatusRequiredException operation
      operationId: OverrideStatusRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PostCommentForComparedCommit:
    post:
      summary: PostCommentForComparedCommit operation
      operationId: PostCommentForComparedCommit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                afterCommitId:
                  type: string
                beforeCommitId:
                  type: string
                clientRequestToken:
                  type: string
                content:
                  type: string
                filePath:
                  type: string
                relativeFileVersion:
                  type: string
                repositoryName:
                  type: string
                afterBlobId:
                  type: string
                beforeBlobId:
                  type: string
                authorArn:
                  type: string
                commentId:
                  type: string
                inReplyTo:
                  type: string
              required:
              - afterCommitId
              - beforeCommitId
              - clientRequestToken
              - content
              - filePath
              - relativeFileVersion
              - repositoryName
              - afterBlobId
              - afterCommitId
              - beforeBlobId
              - beforeCommitId
              - authorArn
              - clientRequestToken
              - commentId
              - content
              - inReplyTo
              - filePath
              - relativeFileVersion
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BeforeCommitIdAndAfterCommitIdAreSameException:
    post:
      summary: BeforeCommitIdAndAfterCommitIdAreSameException operation
      operationId: BeforeCommitIdAndAfterCommitIdAreSameException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommentContentRequiredException:
    post:
      summary: CommentContentRequiredException operation
      operationId: CommentContentRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommentContentSizeLimitExceededException:
    post:
      summary: CommentContentSizeLimitExceededException operation
      operationId: CommentContentSizeLimitExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidFileLocationException:
    post:
      summary: InvalidFileLocationException operation
      operationId: InvalidFileLocationException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidFilePositionException:
    post:
      summary: InvalidFilePositionException operation
      operationId: InvalidFilePositionException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidRelativeFileVersionEnumException:
    post:
      summary: InvalidRelativeFileVersionEnumException operation
      operationId: InvalidRelativeFileVersionEnumException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PostCommentForPullRequest:
    post:
      summary: PostCommentForPullRequest operation
      operationId: PostCommentForPullRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                afterCommitId:
                  type: string
                beforeCommitId:
                  type: string
                clientRequestToken:
                  type: string
                content:
                  type: string
                filePath:
                  type: string
                relativeFileVersion:
                  type: string
                pullRequestId:
                  type: string
                repositoryName:
                  type: string
                afterBlobId:
                  type: string
                beforeBlobId:
                  type: string
                authorArn:
                  type: string
                commentId:
                  type: string
                inReplyTo:
                  type: string
              required:
              - afterCommitId
              - beforeCommitId
              - clientRequestToken
              - content
              - filePath
              - relativeFileVersion
              - pullRequestId
              - repositoryName
              - afterBlobId
              - afterCommitId
              - beforeBlobId
              - beforeCommitId
              - authorArn
              - clientRequestToken
              - commentId
              - content
              - inReplyTo
              - filePath
              - relativeFileVersion
              - pullRequestId
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PostCommentReply:
    post:
      summary: PostCommentReply operation
      operationId: PostCommentReply
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientRequestToken:
                  type: string
                content:
                  type: string
                inReplyTo:
                  type: string
                authorArn:
                  type: string
                commentId:
                  type: string
              required:
              - clientRequestToken
              - content
              - inReplyTo
              - authorArn
              - clientRequestToken
              - commentId
              - content
              - inReplyTo
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PutCommentReaction:
    post:
      summary: PutCommentReaction operation
      operationId: PutCommentReaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
                reactionValue:
                  type: string
              required:
              - commentId
              - reactionValue
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidReactionValueException:
    post:
      summary: InvalidReactionValueException operation
      operationId: InvalidReactionValueException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ReactionLimitExceededException:
    post:
      summary: ReactionLimitExceededException operation
      operationId: ReactionLimitExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ReactionValueRequiredException:
    post:
      summary: ReactionValueRequiredException operation
      operationId: ReactionValueRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PutFile:
    post:
      summary: PutFile operation
      operationId: PutFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branchName:
                  type: string
                commitMessage:
                  type: string
                email:
                  type: string
                fileMode:
                  type: string
                filePath:
                  type: string
                name:
                  type: string
                parentCommitId:
                  type: string
                repositoryName:
                  type: string
                blobId:
                  type: string
                commitId:
                  type: string
                treeId:
                  type: string
              required:
              - branchName
              - commitMessage
              - email
              - fileMode
              - filePath
              - name
              - parentCommitId
              - repositoryName
              - blobId
              - commitId
              - treeId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FileContentRequiredException:
    post:
      summary: FileContentRequiredException operation
      operationId: FileContentRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /SameFileContentException:
    post:
      summary: SameFileContentException operation
      operationId: SameFileContentException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PutRepositoryTriggers:
    post:
      summary: PutRepositoryTriggers operation
      operationId: PutRepositoryTriggers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                repositoryName:
                  type: string
                customData:
                  type: string
                destinationArn:
                  type: string
                name:
                  type: string
                configurationId:
                  type: string
              required:
              - repositoryName
              - customData
              - destinationArn
              - name
              - configurationId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidRepositoryTriggerBranchNameException:
    post:
      summary: InvalidRepositoryTriggerBranchNameException operation
      operationId: InvalidRepositoryTriggerBranchNameException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidRepositoryTriggerCustomDataException:
    post:
      summary: InvalidRepositoryTriggerCustomDataException operation
      operationId: InvalidRepositoryTriggerCustomDataException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidRepositoryTriggerDestinationArnException:
    post:
      summary: InvalidRepositoryTriggerDestinationArnException operation
      operationId: InvalidRepositoryTriggerDestinationArnException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidRepositoryTriggerEventsException:
    post:
      summary: InvalidRepositoryTriggerEventsException operation
      operationId: InvalidRepositoryTriggerEventsException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidRepositoryTriggerNameException:
    post:
      summary: InvalidRepositoryTriggerNameException operation
      operationId: InvalidRepositoryTriggerNameException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidRepositoryTriggerRegionException:
    post:
      summary: InvalidRepositoryTriggerRegionException operation
      operationId: InvalidRepositoryTriggerRegionException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MaximumBranchesExceededException:
    post:
      summary: MaximumBranchesExceededException operation
      operationId: MaximumBranchesExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MaximumRepositoryTriggersExceededException:
    post:
      summary: MaximumRepositoryTriggersExceededException operation
      operationId: MaximumRepositoryTriggersExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryTriggerBranchNameListRequiredException:
    post:
      summary: RepositoryTriggerBranchNameListRequiredException operation
      operationId: RepositoryTriggerBranchNameListRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryTriggerDestinationArnRequiredException:
    post:
      summary: RepositoryTriggerDestinationArnRequiredException operation
      operationId: RepositoryTriggerDestinationArnRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryTriggerEventsListRequiredException:
    post:
      summary: RepositoryTriggerEventsListRequiredException operation
      operationId: RepositoryTriggerEventsListRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryTriggerNameRequiredException:
    post:
      summary: RepositoryTriggerNameRequiredException operation
      operationId: RepositoryTriggerNameRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryTriggersListRequiredException:
    post:
      summary: RepositoryTriggersListRequiredException operation
      operationId: RepositoryTriggersListRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /TagResource:
    post:
      summary: TagResource operation
      operationId: TagResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resourceArn:
                  type: string
                string:
                  type: string
              required:
              - resourceArn
              - string
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /TagsMapRequiredException:
    post:
      summary: TagsMapRequiredException operation
      operationId: TagsMapRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /TestRepositoryTriggers:
    post:
      summary: TestRepositoryTriggers operation
      operationId: TestRepositoryTriggers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                repositoryName:
                  type: string
                customData:
                  type: string
                destinationArn:
                  type: string
                name:
                  type: string
                failureMessage:
                  type: string
                trigger:
                  type: string
              required:
              - repositoryName
              - customData
              - destinationArn
              - name
              - failureMessage
              - trigger
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UntagResource:
    post:
      summary: UntagResource operation
      operationId: UntagResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resourceArn:
                  type: string
              required:
              - resourceArn
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidTagKeysListException:
    post:
      summary: InvalidTagKeysListException operation
      operationId: InvalidTagKeysListException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /TagKeysListRequiredException:
    post:
      summary: TagKeysListRequiredException operation
      operationId: TagKeysListRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdateApprovalRuleTemplateContent:
    post:
      summary: UpdateApprovalRuleTemplateContent operation
      operationId: UpdateApprovalRuleTemplateContent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleTemplateName:
                  type: string
                existingRuleContentSha256:
                  type: string
                newRuleContent:
                  type: string
                approvalRuleTemplateContent:
                  type: string
                approvalRuleTemplateDescription:
                  type: string
                approvalRuleTemplateId:
                  type: string
                lastModifiedUser:
                  type: string
                ruleContentSha256:
                  type: string
              required:
              - approvalRuleTemplateName
              - existingRuleContentSha256
              - newRuleContent
              - approvalRuleTemplateContent
              - approvalRuleTemplateDescription
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - lastModifiedUser
              - ruleContentSha256
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdateApprovalRuleTemplateDescription:
    post:
      summary: UpdateApprovalRuleTemplateDescription operation
      operationId: UpdateApprovalRuleTemplateDescription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleTemplateDescription:
                  type: string
                approvalRuleTemplateName:
                  type: string
                approvalRuleTemplateContent:
                  type: string
                approvalRuleTemplateId:
                  type: string
                lastModifiedUser:
                  type: string
                ruleContentSha256:
                  type: string
              required:
              - approvalRuleTemplateDescription
              - approvalRuleTemplateName
              - approvalRuleTemplateContent
              - approvalRuleTemplateDescription
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - lastModifiedUser
              - ruleContentSha256
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdateApprovalRuleTemplateName:
    post:
      summary: UpdateApprovalRuleTemplateName operation
      operationId: UpdateApprovalRuleTemplateName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newApprovalRuleTemplateName:
                  type: string
                oldApprovalRuleTemplateName:
                  type: string
                approvalRuleTemplateContent:
                  type: string
                approvalRuleTemplateDescription:
                  type: string
                approvalRuleTemplateId:
                  type: string
                approvalRuleTemplateName:
                  type: string
                lastModifiedUser:
                  type: string
                ruleContentSha256:
                  type: string
              required:
              - newApprovalRuleTemplateName
              - oldApprovalRuleTemplateName
              - approvalRuleTemplateContent
              - approvalRuleTemplateDescription
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - lastModifiedUser
              - ruleContentSha256
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdateComment:
    post:
      summary: UpdateComment operation
      operationId: UpdateComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
                content:
                  type: string
                authorArn:
                  type: string
                clientRequestToken:
                  type: string
                inReplyTo:
                  type: string
              required:
              - commentId
              - content
              - authorArn
              - clientRequestToken
              - commentId
              - content
              - inReplyTo
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommentNotCreatedByCallerException:
    post:
      summary: CommentNotCreatedByCallerException operation
      operationId: CommentNotCreatedByCallerException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdateDefaultBranch:
    post:
      summary: UpdateDefaultBranch operation
      operationId: UpdateDefaultBranch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                defaultBranchName:
                  type: string
                repositoryName:
                  type: string
              required:
              - defaultBranchName
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdatePullRequestApprovalRuleContent:
    post:
      summary: UpdatePullRequestApprovalRuleContent operation
      operationId: UpdatePullRequestApprovalRuleContent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalRuleName:
                  type: string
                existingRuleContentSha256:
                  type: string
                newRuleContent:
                  type: string
                pullRequestId:
                  type: string
                approvalRuleContent:
                  type: string
                approvalRuleId:
                  type: string
                lastModifiedUser:
                  type: string
                approvalRuleTemplateId:
                  type: string
                approvalRuleTemplateName:
                  type: string
                ruleContentSha256:
                  type: string
              required:
              - approvalRuleName
              - existingRuleContentSha256
              - newRuleContent
              - pullRequestId
              - approvalRuleContent
              - approvalRuleId
              - approvalRuleName
              - lastModifiedUser
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - ruleContentSha256
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRuleDoesNotExistException:
    post:
      summary: ApprovalRuleDoesNotExistException operation
      operationId: ApprovalRuleDoesNotExistException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CannotModifyApprovalRuleFromTemplateException:
    post:
      summary: CannotModifyApprovalRuleFromTemplateException operation
      operationId: CannotModifyApprovalRuleFromTemplateException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdatePullRequestApprovalState:
    post:
      summary: UpdatePullRequestApprovalState operation
      operationId: UpdatePullRequestApprovalState
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvalState:
                  type: string
                pullRequestId:
                  type: string
                revisionId:
                  type: string
              required:
              - approvalState
              - pullRequestId
              - revisionId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalStateRequiredException:
    post:
      summary: ApprovalStateRequiredException operation
      operationId: ApprovalStateRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidApprovalStateException:
    post:
      summary: InvalidApprovalStateException operation
      operationId: InvalidApprovalStateException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MaximumNumberOfApprovalsExceededException:
    post:
      summary: MaximumNumberOfApprovalsExceededException operation
      operationId: MaximumNumberOfApprovalsExceededException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequestCannotBeApprovedByAuthorException:
    post:
      summary: PullRequestCannotBeApprovedByAuthorException operation
      operationId: PullRequestCannotBeApprovedByAuthorException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdatePullRequestDescription:
    post:
      summary: UpdatePullRequestDescription operation
      operationId: UpdatePullRequestDescription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                pullRequestId:
                  type: string
                approvalRuleContent:
                  type: string
                approvalRuleId:
                  type: string
                approvalRuleName:
                  type: string
                lastModifiedUser:
                  type: string
                approvalRuleTemplateId:
                  type: string
                approvalRuleTemplateName:
                  type: string
                ruleContentSha256:
                  type: string
                authorArn:
                  type: string
                clientRequestToken:
                  type: string
                pullRequestStatus:
                  type: string
                destinationCommit:
                  type: string
                destinationReference:
                  type: string
                mergeBase:
                  type: string
                mergeCommitId:
                  type: string
                mergedBy:
                  type: string
                mergeOption:
                  type: string
                repositoryName:
                  type: string
                sourceCommit:
                  type: string
                sourceReference:
                  type: string
                revisionId:
                  type: string
                title:
                  type: string
              required:
              - description
              - pullRequestId
              - approvalRuleContent
              - approvalRuleId
              - approvalRuleName
              - lastModifiedUser
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - ruleContentSha256
              - authorArn
              - clientRequestToken
              - description
              - pullRequestId
              - pullRequestStatus
              - destinationCommit
              - destinationReference
              - mergeBase
              - mergeCommitId
              - mergedBy
              - mergeOption
              - repositoryName
              - sourceCommit
              - sourceReference
              - revisionId
              - title
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdatePullRequestStatus:
    post:
      summary: UpdatePullRequestStatus operation
      operationId: UpdatePullRequestStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pullRequestId:
                  type: string
                pullRequestStatus:
                  type: string
                approvalRuleContent:
                  type: string
                approvalRuleId:
                  type: string
                approvalRuleName:
                  type: string
                lastModifiedUser:
                  type: string
                approvalRuleTemplateId:
                  type: string
                approvalRuleTemplateName:
                  type: string
                ruleContentSha256:
                  type: string
                authorArn:
                  type: string
                clientRequestToken:
                  type: string
                description:
                  type: string
                destinationCommit:
                  type: string
                destinationReference:
                  type: string
                mergeBase:
                  type: string
                mergeCommitId:
                  type: string
                mergedBy:
                  type: string
                mergeOption:
                  type: string
                repositoryName:
                  type: string
                sourceCommit:
                  type: string
                sourceReference:
                  type: string
                revisionId:
                  type: string
                title:
                  type: string
              required:
              - pullRequestId
              - pullRequestStatus
              - approvalRuleContent
              - approvalRuleId
              - approvalRuleName
              - lastModifiedUser
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - ruleContentSha256
              - authorArn
              - clientRequestToken
              - description
              - pullRequestId
              - pullRequestStatus
              - destinationCommit
              - destinationReference
              - mergeBase
              - mergeCommitId
              - mergedBy
              - mergeOption
              - repositoryName
              - sourceCommit
              - sourceReference
              - revisionId
              - title
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidPullRequestStatusUpdateException:
    post:
      summary: InvalidPullRequestStatusUpdateException operation
      operationId: InvalidPullRequestStatusUpdateException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequestStatusRequiredException:
    post:
      summary: PullRequestStatusRequiredException operation
      operationId: PullRequestStatusRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdatePullRequestTitle:
    post:
      summary: UpdatePullRequestTitle operation
      operationId: UpdatePullRequestTitle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pullRequestId:
                  type: string
                title:
                  type: string
                approvalRuleContent:
                  type: string
                approvalRuleId:
                  type: string
                approvalRuleName:
                  type: string
                lastModifiedUser:
                  type: string
                approvalRuleTemplateId:
                  type: string
                approvalRuleTemplateName:
                  type: string
                ruleContentSha256:
                  type: string
                authorArn:
                  type: string
                clientRequestToken:
                  type: string
                description:
                  type: string
                pullRequestStatus:
                  type: string
                destinationCommit:
                  type: string
                destinationReference:
                  type: string
                mergeBase:
                  type: string
                mergeCommitId:
                  type: string
                mergedBy:
                  type: string
                mergeOption:
                  type: string
                repositoryName:
                  type: string
                sourceCommit:
                  type: string
                sourceReference:
                  type: string
                revisionId:
                  type: string
              required:
              - pullRequestId
              - title
              - approvalRuleContent
              - approvalRuleId
              - approvalRuleName
              - lastModifiedUser
              - approvalRuleTemplateId
              - approvalRuleTemplateName
              - ruleContentSha256
              - authorArn
              - clientRequestToken
              - description
              - pullRequestId
              - pullRequestStatus
              - destinationCommit
              - destinationReference
              - mergeBase
              - mergeCommitId
              - mergedBy
              - mergeOption
              - repositoryName
              - sourceCommit
              - sourceReference
              - revisionId
              - title
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdateRepositoryDescription:
    post:
      summary: UpdateRepositoryDescription operation
      operationId: UpdateRepositoryDescription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                repositoryDescription:
                  type: string
                repositoryName:
                  type: string
              required:
              - repositoryDescription
              - repositoryName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdateRepositoryEncryptionKey:
    post:
      summary: UpdateRepositoryEncryptionKey operation
      operationId: UpdateRepositoryEncryptionKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                kmsKeyId:
                  type: string
                repositoryName:
                  type: string
                originalKmsKeyId:
                  type: string
                repositoryId:
                  type: string
              required:
              - kmsKeyId
              - repositoryName
              - kmsKeyId
              - originalKmsKeyId
              - repositoryId
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /EncryptionKeyRequiredException:
    post:
      summary: EncryptionKeyRequiredException operation
      operationId: EncryptionKeyRequiredException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UpdateRepositoryName:
    post:
      summary: UpdateRepositoryName operation
      operationId: UpdateRepositoryName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
                oldName:
                  type: string
              required:
              - newName
              - oldName
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRule:
    post:
      summary: ApprovalRule operation
      operationId: ApprovalRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRuleEventMetadata:
    post:
      summary: ApprovalRuleEventMetadata operation
      operationId: ApprovalRuleEventMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRuleOverriddenEventMetadata:
    post:
      summary: ApprovalRuleOverriddenEventMetadata operation
      operationId: ApprovalRuleOverriddenEventMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalRuleTemplate:
    post:
      summary: ApprovalRuleTemplate operation
      operationId: ApprovalRuleTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ApprovalStateChangedEventMetadata:
    post:
      summary: ApprovalStateChangedEventMetadata operation
      operationId: ApprovalStateChangedEventMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BatchAssociateApprovalRuleTemplateWithRepositoriesError:
    post:
      summary: BatchAssociateApprovalRuleTemplateWithRepositoriesError operation
      operationId: BatchAssociateApprovalRuleTemplateWithRepositoriesError
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BatchDescribeMergeConflictsError:
    post:
      summary: BatchDescribeMergeConflictsError operation
      operationId: BatchDescribeMergeConflictsError
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BatchDisassociateApprovalRuleTemplateFromRepositoriesError:
    post:
      summary: BatchDisassociateApprovalRuleTemplateFromRepositoriesError operation
      operationId: BatchDisassociateApprovalRuleTemplateFromRepositoriesError
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BatchGetCommitsError:
    post:
      summary: BatchGetCommitsError operation
      operationId: BatchGetCommitsError
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BatchGetRepositoriesError:
    post:
      summary: BatchGetRepositoriesError operation
      operationId: BatchGetRepositoriesError
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BlobMetadata:
    post:
      summary: BlobMetadata operation
      operationId: BlobMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /BranchInfo:
    post:
      summary: BranchInfo operation
      operationId: BranchInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommentsForComparedCommit:
    post:
      summary: CommentsForComparedCommit operation
      operationId: CommentsForComparedCommit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /CommentsForPullRequest:
    post:
      summary: CommentsForPullRequest operation
      operationId: CommentsForPullRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ConflictMetadata:
    post:
      summary: ConflictMetadata operation
      operationId: ConflictMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ConflictResolution:
    post:
      summary: ConflictResolution operation
      operationId: ConflictResolution
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /DeleteFileEntry:
    post:
      summary: DeleteFileEntry operation
      operationId: DeleteFileEntry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FileMetadata:
    post:
      summary: FileMetadata operation
      operationId: FileMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FileModes:
    post:
      summary: FileModes operation
      operationId: FileModes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FileSizes:
    post:
      summary: FileSizes operation
      operationId: FileSizes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /FileVersion:
    post:
      summary: FileVersion operation
      operationId: FileVersion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /IsBinaryFile:
    post:
      summary: IsBinaryFile operation
      operationId: IsBinaryFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MergeHunk:
    post:
      summary: MergeHunk operation
      operationId: MergeHunk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MergeHunkDetail:
    post:
      summary: MergeHunkDetail operation
      operationId: MergeHunkDetail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MergeMetadata:
    post:
      summary: MergeMetadata operation
      operationId: MergeMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /MergeOperations:
    post:
      summary: MergeOperations operation
      operationId: MergeOperations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ObjectTypes:
    post:
      summary: ObjectTypes operation
      operationId: ObjectTypes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /OriginApprovalRuleTemplate:
    post:
      summary: OriginApprovalRuleTemplate operation
      operationId: OriginApprovalRuleTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequest:
    post:
      summary: PullRequest operation
      operationId: PullRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequestCreatedEventMetadata:
    post:
      summary: PullRequestCreatedEventMetadata operation
      operationId: PullRequestCreatedEventMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequestEvent:
    post:
      summary: PullRequestEvent operation
      operationId: PullRequestEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequestMergedStateChangedEventMetadata:
    post:
      summary: PullRequestMergedStateChangedEventMetadata operation
      operationId: PullRequestMergedStateChangedEventMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequestSourceReferenceUpdatedEventMetadata:
    post:
      summary: PullRequestSourceReferenceUpdatedEventMetadata operation
      operationId: PullRequestSourceReferenceUpdatedEventMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequestStatusChangedEventMetadata:
    post:
      summary: PullRequestStatusChangedEventMetadata operation
      operationId: PullRequestStatusChangedEventMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PullRequestTarget:
    post:
      summary: PullRequestTarget operation
      operationId: PullRequestTarget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /PutFileEntry:
    post:
      summary: PutFileEntry operation
      operationId: PutFileEntry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ReactionForComment:
    post:
      summary: ReactionForComment operation
      operationId: ReactionForComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ReactionValueFormats:
    post:
      summary: ReactionValueFormats operation
      operationId: ReactionValueFormats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ReplaceContentEntry:
    post:
      summary: ReplaceContentEntry operation
      operationId: ReplaceContentEntry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryMetadata:
    post:
      summary: RepositoryMetadata operation
      operationId: RepositoryMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryNameIdPair:
    post:
      summary: RepositoryNameIdPair operation
      operationId: RepositoryNameIdPair
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryTrigger:
    post:
      summary: RepositoryTrigger operation
      operationId: RepositoryTrigger
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RepositoryTriggerExecutionFailure:
    post:
      summary: RepositoryTriggerExecutionFailure operation
      operationId: RepositoryTriggerExecutionFailure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /SetFileModeEntry:
    post:
      summary: SetFileModeEntry operation
      operationId: SetFileModeEntry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /SourceFileSpecifier:
    post:
      summary: SourceFileSpecifier operation
      operationId: SourceFileSpecifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /SubModule:
    post:
      summary: SubModule operation
      operationId: SubModule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /SymbolicLink:
    post:
      summary: SymbolicLink operation
      operationId: SymbolicLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /UserInfo:
    post:
      summary: UserInfo operation
      operationId: UserInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /AccessDeniedException:
    post:
      summary: AccessDeniedException operation
      operationId: AccessDeniedException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /IncompleteSignature:
    post:
      summary: IncompleteSignature operation
      operationId: IncompleteSignature
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InternalFailure:
    post:
      summary: InternalFailure operation
      operationId: InternalFailure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidAction:
    post:
      summary: InvalidAction operation
      operationId: InvalidAction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /InvalidClientTokenId:
    post:
      summary: InvalidClientTokenId operation
      operationId: InvalidClientTokenId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /NotAuthorized:
    post:
      summary: NotAuthorized operation
      operationId: NotAuthorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /OptInRequired:
    post:
      summary: OptInRequired operation
      operationId: OptInRequired
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /RequestExpired:
    post:
      summary: RequestExpired operation
      operationId: RequestExpired
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ServiceUnavailable:
    post:
      summary: ServiceUnavailable operation
      operationId: ServiceUnavailable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ThrottlingException:
    post:
      summary: ThrottlingException operation
      operationId: ThrottlingException
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
  /ValidationError:
    post:
      summary: ValidationError operation
      operationId: ValidationError
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        '200':
          description: Success
        '400':
          description: Client Error
        '500':
          description: Server Error
